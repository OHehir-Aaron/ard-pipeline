#!/usr/bin/env python
import sys
import os
from os.path import isfile, join as pjoin, split as psplit
from shutil import copyfile

ARGS = {
    # binary : (num_args, input_args, output_args)
    'read_flx_ga_trans': (3, (1, 2), (3)),
    'input_modtran_ortho': (22, (1, 2, 3, 4), range(5, 23)),
    'read_modtran': (58, range(1,11), range(11, 59)),
    'refort_tp5_ga': (3, (1, 2), (3)),
    'refort_tp5_ga_trans': (3, (1, 2), (3)),
    'coefficient': (7, range(1,7), (7)),
    'read_flx_ga': (3, (1, 2), (3)),
    'read_modtrancor_ortho': (4, (1, 2), (3, 4)),
    'input_modtran_ortho_ula': (22, (1, 2, 3, 4), range(5,23)),
    'brdf_sim_bin': (15, range(1,13), (13, 14, 15)),
    'brdf_sim_bin_LS8': (15, range(1,13), (13, 14, 15)),
    'brdf_sim_bin_slc': (15, range(1,13), (13, 14, 15)),
    'binear_ortho': (5, (1, 2, 3, 4), (5))
}

try:
   OUTPUT_ROOT = os.environ['OUTPUT_ROOT']
   VALID_ROOT = os.environ['VALID_ROOT']
except KeyError:
   print 'Error: You must set OUTPUT_ROOT and VALID_ROOT env variables'
   sys.exit(1)

try:
    binary = psplit(sys.argv[0])[1]
    nargs, inputs, outputs = ARGS[binary]
    margs = len(sys.argv) - 1
    if not nargs == margs:
        print 'Error: Not enough arguments,  %i/%i supplied' % (margs, nargs)
        sys.exit(1)
except KeyError:
    print 'Error: Unknown binary'
    sys.exit(666)


def check_input(src):
    if not isfile(src):
        print 'Error: Input file %s does not exist.' % src
        sys.exit(2)


def check_output(dst):
    if isfile(dst):
        print 'Error: Output file %s already exists.' % dst
        sys.exit(3)


def mock_output(dst):
    src = dst.replace(OUTPUT_ROOT, VALID_ROOT)
    copyfile(src, dst)

for i in inputs:
    check_input(sys.argv[i])

for o in outputs:
    check_output(sys.argv[o])
    mock_output(sys.argv[o])
